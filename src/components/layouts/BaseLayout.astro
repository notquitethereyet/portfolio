---
import '../../styles/global.css';
import Oneko from '../ui/Oneko.astro';
import { getBaseUrl, buildUrl } from '../../utils/paths';

interface Props {
  title?: string;
  description?: string;
  image?: string;
}

const { 
  title = "Portfolio - Boid Fish Simulation",
  description = "Portfolio website with interactive boid fish simulation background",
  image = "mumei.jpg"
} = Astro.props;

const baseUrl = getBaseUrl();
const canonicalURL = new URL(Astro.url.pathname, Astro.site || 'https://notquitethereyet.github.io/portfolio/');
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content={description}>
    <meta name="author" content="Arnav Panigrahi">
    <meta name="keywords" content="portfolio, developer, software engineer, machine learning, AI, web development">
    <meta property="og:title" content={title}>
    <meta property="og:description" content={description}>
    <meta property="og:image" content={buildUrl(image)}>
    <meta property="og:url" content={canonicalURL}>
    <meta property="og:type" content="website">
    <meta name="twitter:card" content="summary_large_image">
    <link rel="canonical" href={canonicalURL}>
    <title>{title}</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="icon" type="image/svg+xml" href={buildUrl('favicon.svg')} />
</head>
<body class="font-sans text-gray-800">
    <canvas id="boidCanvas"></canvas>
    
    <main class="relative z-[1]">
        <slot />
    </main>
    
    <!-- Optimized Boid Simulation Script -->
    <script is:inline define:vars={{ baseUrl }}>
        // Single initialization function
        function initBoidSimulation() {
            const canvas = document.getElementById('boidCanvas');
            if (!canvas || canvas.__boidInitialized) return;
            
            canvas.__boidInitialized = true;
            
            const script = document.createElement('script');
            script.src = `${baseUrl}js/boid-simulation.js`;
            script.onerror = () => console.error('Failed to load boid simulation');
            document.body.appendChild(script);
        }

        // Initialize when DOM is ready
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initBoidSimulation);
        } else {
            initBoidSimulation();
        }
    </script>
    
    <!-- Oneko animation -->
    <Oneko position="bottom-right" />
  <script>
    // Attach interactive gradient handlers to elements marked with data-glass-interactive
    const attachGlassHandlers = (root = document) => {
      const elements = root.querySelectorAll('[data-glass-interactive]');
      elements.forEach((el) => {
        const element = el as HTMLElement;
        const onMove = (ev: MouseEvent) => {
          const r = element.getBoundingClientRect();
          element.style.setProperty('--mx', `${((ev.clientX - r.left) / r.width) * 100}%`);
          element.style.setProperty('--my', `${((ev.clientY - r.top) / r.height) * 100}%`);
        };
        const onEnter = () => {
          if (element.hasAttribute('data-glass-random')) {
            const pick = Math.random();
            element.style.setProperty('--glass-a', pick > .5 ? 'oklch(0.64 0.18 265)' : 'oklch(0.78 0.11 160)');
            element.style.setProperty('--glass-b', pick > .5 ? 'oklch(0.68 0.21 345)' : 'oklch(0.70 0.16 265)');
          }
        };
        element.addEventListener('mousemove', onMove);
        element.addEventListener('mouseenter', onEnter);
      });
    };
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => attachGlassHandlers());
    } else {
      attachGlassHandlers();
    }
  </script>
</body>
</html>


